import{_ as e,c as a,o as t,O as l}from"./chunks/framework.0d343703.js";const u=JSON.parse('{"title":"css 选择器","description":"","frontmatter":{"title":"css 选择器","date":"2021-08-25T15:45:00.000Z","summary":"Babel","tags":["工程化"]},"headers":[],"relativePath":"technology/AST抽象语法树.md"}'),o={name:"technology/AST抽象语法树.md"},s=l('<h1 id="babel原理" tabindex="-1">Babel原理 <a class="header-anchor" href="#babel原理" aria-label="Permalink to &quot;Babel原理&quot;">​</a></h1><h3 id="babel的工作流程" tabindex="-1">Babel的工作流程 <a class="header-anchor" href="#babel的工作流程" aria-label="Permalink to &quot;Babel的工作流程&quot;">​</a></h3><ul><li><p>解析：解析成AST，由babylon引擎实现。</p><p>两个阶段：词法分析、语法分析。</p><ul><li><p>词法分析：字符串=&gt;令牌（token）类似于ast节点。</p></li><li><p>语法分析：令牌=&gt;AST，信息=&gt;ast的方式。</p></li></ul></li><li><p>转换：接受到AST后进行处理：通过babel-traverse进行遍历，进行节点的添加、更新、移除等操作。（Babel开始介入工作）</p></li><li><p>生成：讲转换完成的AST通过babel-generator转换成js代码，进行整体遍历，然后进行转换对应的字符串。</p></li></ul>',3),r=[s];function _(i,n,c,b,p,d){return t(),a("div",null,r)}const T=e(o,[["render",_]]);export{u as __pageData,T as default};
