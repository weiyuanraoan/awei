import{_ as s,c as a,o as n,O as l}from"./chunks/framework.0d343703.js";const d=JSON.parse('{"title":"判断字符串包含方法","description":"","frontmatter":{"title":"判断字符串包含方法","date":"2021-08-19T15:47:00.000Z","summary":"js方法小计","tags":["js"]},"headers":[],"relativePath":"technology/判断字符串包含方法.md"}'),p={name:"technology/判断字符串包含方法.md"},e=l(`<h1 id="判断字符串包含方法" tabindex="-1">判断字符串包含方法 <a class="header-anchor" href="#判断字符串包含方法" aria-label="Permalink to &quot;判断字符串包含方法&quot;">​</a></h1><ul><li><p>indexOf（searchStr，formIndex）</p><p>对大小写敏感，若不存在则返回-1；</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> srt </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">asd</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">indexOf</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">!==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">//true</span></span></code></pre></div></li><li><p>match（regexp）</p><p>在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">var str = &quot;123&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">var reg = RegExp(/3/);</span></span>
<span class="line"><span style="color:#A6ACCD;">	if(str.match(reg)){</span></span>
<span class="line"><span style="color:#A6ACCD;"> //包含；</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div></li><li><p>serach(regexp)</p><p>search() 方法不执行全局匹配，它将忽略标志 g。它同时忽略 regexp 的 lastIndex 属性，并且总是从字符串的开始进行检索，这意味着它总是返回 stringObject 的第一个匹配的位置。</p><p>类似于indexOf（）</p></li><li><p><strong>test()</strong></p><p>用于检索字符串中指定的值。返回 true 或 false。</p></li><li><p><strong>exec()</strong></p><p>用于检索字符串中的正则表达式的匹配。返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">var str = &quot;123&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">var reg = RegExp(/3/);</span></span>
<span class="line"><span style="color:#A6ACCD;">	if(reg.exec(str)){</span></span>
<span class="line"><span style="color:#A6ACCD;">  //包含；</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div></li></ul>`,2),o=[e];function t(c,r,i,C,y,A){return n(),a("div",null,o)}const _=s(p,[["render",t]]);export{d as __pageData,_ as default};
