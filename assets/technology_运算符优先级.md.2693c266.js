import{_ as t,c as o,o as s,O as a}from"./chunks/framework.0d343703.js";const y=JSON.parse('{"title":"Js运算符优先级","description":"","frontmatter":{"title":"Js运算符优先级","date":"2021-08-25T15:45:00.000Z","summary":"平时容易忽略的点，正好总结一下。","tags":["Js"]},"headers":[],"relativePath":"technology/运算符优先级.md"}'),l={name:"technology/运算符优先级.md"},e=a(`<h1 id="js-运算符优先级" tabindex="-1">JS 运算符优先级 <a class="header-anchor" href="#js-运算符优先级" aria-label="Permalink to &quot;JS 运算符优先级&quot;">​</a></h1><h2 id="js-运算符" tabindex="-1">js 运算符 <a class="header-anchor" href="#js-运算符" aria-label="Permalink to &quot;js 运算符&quot;">​</a></h2><h3 id="算数运算符" tabindex="-1">算数运算符 <a class="header-anchor" href="#算数运算符" aria-label="Permalink to &quot;算数运算符&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">+ - * /</span></span></code></pre></div><ul><li><p>运算顺序：先算乘除取余、再算加减，有小括号先算小括号。</p></li><li><p>NaN 参与的运算 :得到结果都为 NaN；</p></li><li><p>infinity 参与的运算 ：视情况而定。</p></li><li><p>&quot;+&quot; 参与视情况隐式转换。</p><h3 id="比较运算符" tabindex="-1">比较运算符 <a class="header-anchor" href="#比较运算符" aria-label="Permalink to &quot;比较运算符&quot;">​</a></h3></li><li><p>比较运算符</p></li><li><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td><code>&gt;</code></td><td>大于</td></tr><tr><td><code>&lt;</code></td><td>小于</td></tr><tr><td><code>&gt;=</code></td><td>大于等于</td></tr><tr><td><code>&lt;=</code></td><td>小于等于</td></tr><tr><td><code>==</code></td><td>相等 <code>只判断值大小是否相等</code>，<code>不判断数据类型</code></td></tr><tr><td><code>!=</code></td><td>不等 <code>与相等完全相反</code></td></tr><tr><td><code>===</code></td><td>全等 <code>不光判断值相等</code>，<code>还要判断数据类型相等</code></td></tr><tr><td><code>!==</code></td><td>不全等 <code>与全等于完全相反</code></td></tr></tbody></table></li><li><p>NaN 参与：不等于和不全等于结果是 <code>true</code>，其他的都得到 <code>false</code></p></li><li><p>Infinity 参与的运算，视情况而定</p></li><li><p>其他数据类型也会隐式转换为数字参与比较。</p></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">123</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> → </span><span style="color:#F78C6C;">123</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> → </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;"> → </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;"> → </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">undefined</span><span style="color:#A6ACCD;"> → </span><span style="color:#89DDFF;">NaN</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#A6ACCD;"> → </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> → </span><span style="color:#89DDFF;">NaN</span></span></code></pre></div><ul><li><p>null 的判断比较特殊：null 与 0 判断时，相等判断为 false，&gt;= 和 &lt;= 判断为 true</p></li><li><p>字符串比较时，比较两个字符串的 Unicode 编码顺序。从前往后 0-9，A-Z，a-z，前面的小于后面的。不关心两个字符串的长度，从第一个字符开始比较，依次往后顺延比较，直到比较出大小，就不再往后比较。</p><pre><code>    // 字符串之间比较
    console.log(3 &lt; &quot;7&quot;); // true
    console.log(&quot;3&quot; &lt; &quot;17&quot;); // false
    console.log(&quot;3&quot; &lt; &quot;37&quot;); // true
    console.log(&quot;3&quot; &lt; &quot;47&quot;); // true
    console.log(&quot;3&quot; &lt; &quot;3&quot;); // false
    console.log(&quot;3&quot; &lt; &quot;a&quot;); // true
    console.log(&quot;A&quot; &lt; &quot;a&quot;); // true
    console.log(&quot;A&quot; &lt; &quot;0a&quot;); // false
    console.log(&quot;Z&quot; &lt; &quot;a&quot;); // true
    console.log(&quot;9Z&quot; &lt; &quot;a&quot;); // true

    // 比较顺序，从前往后比较，前面先得出结果再参与后面的比较
    console.log(3 &gt; 2 &gt; 1);  // false  3 &gt; 2 为true,1为true，所以true&gt;true为false。
</code></pre></li><li><p>转为<code>false</code>：NaN、0、“”空字符串、null、undefined</p></li><li><p>转为<code>true</code>：非 0 非 NaN 数字、非空字符串</p></li><li><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">(逻辑与 a &amp;&amp; b ) 如果a能被转换为false，那么返回a；否则，返回b。</span></span>
<span class="line"><span style="color:#A6ACCD;">(逻辑或 a || b ) 如果a能被转换为true，那么返回a；否则，返回b。</span></span></code></pre></div></li></ul>`,7),n=[e];function p(c,d,r,i,u,C){return s(),o("div",null,n)}const h=t(l,[["render",p]]);export{y as __pageData,h as default};
